# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="lambda"

# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
alias rake="noglob rake"
alias gpod="git push origin develop"
alias ra="nocorrect noglob ra"
alias tmux="nocorrect noglob tmux"
alias vi=vim
alias v=vim
alias e=vim
alias gff="git flow feature"
alias gffs="git flow feature start"
alias gfff="git flow feature finish"
alias gfrs="git flow release start"
alias gfrf="git flow release finish"
alias gfhs="git flow hotfix start"
alias gfhf="git flow hotfix finish"
alias gcaa="git commit -v -a --amend"
alias gpt="git push --tags origin"
alias gpta="git push --tags origin && git push origin"
alias gitshowtagsbydate="git log --tags --simplify-by-decoration --pretty='format:%ai %d'"
alias gcob="git checkout -b"
alias gmcb="git checkout develop; git merge --no-ff @{-1}"
#alias ack="ack-2.12"
# curl & json formattin
alias pyjson="python -mjson.tool"
cj(){curl "$*" | python -mjson.tool;}
cjl(){curl "$*" | python -mjson.tool | less;}
gcamfb(){git commit -v -a -m "fix bug #$*" ;}

#temp function
stseds() {ssed -i "s|$1|$2|g" MainStoryboard.storyboard}

alias sed=ssed

alias hgrep="history | grep "
#copy with progress
alias rsynccopy="rsync --partial --progress --append --rsh=ssh -r -h "
# enable zmv
autoload -U zmv
alias mmv='noglob zmv -W'

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable weekly auto-update checks
# DISABLE_AUTO_UPDATE="true"

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
# COMPLETION_WAITING_DOTS="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(git heroku git-flow git-extras osx ruby rvm rails pow encode64 brew mix-fast rake-fast django)

source $ZSH/oh-my-zsh.sh

# Customize to your needs...
export PATH=/usr/local/bin:/opt/local/bin:/opt/local/sbin:/usr/sbin:/sbin:/usr/X11/bin:/usr/texbin:/Users/johnlinvc/.ec2/bin:/Applications/android-sdk-macosx/platform-tools:/Users/johnlinvc/.rvm/bin:/Users/johnlinvc/.bin:$PATH

export JAVA_HOME=`/usr/libexec/java_home -v 1.7`

#android path
export ANDROID_HOME=$HOME/android-sdk-macosx

#ec2 crenditals
#export EC2_PRIVATE_KEY="$(/bin/ls "$HOME"/.ec2/pk-*.pem | /usr/bin/head -1)"
#export EC2_CERT="$(/bin/ls "$HOME"/.ec2/cert-*.pem | /usr/bin/head -1)"
export EC2_HOME="/usr/local/Library/LinkedKegs/ec2-api-tools/jars"

[[ -s /Users/johnlinvc/.nvm/nvm.sh ]] && . /Users/johnlinvc/.nvm/nvm.sh # This loads NVM

#fancy-ctrl-z
#press ctrl-z to fg

fancy-ctrl-z () {
  if [[ $#BUFFER -eq 0 ]]; then
    fg
    zle redisplay
  else
    zle push-input
  fi
}
zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z

#add chrominum depot_tools
PATH=$PATH:/Users/johnlinvc/Projs/ikalaProjects/live_ikala/depot_tools

#wget for https
wgets () {
  wget --no-check-certificate $*
}

#alias ctags for homebrew ctags
alias ctags="`brew --prefix`/bin/ctags"

ssh-aws-johnlin-ikala () {
	ssh -i ~/.ec2/ikala_johnlinvc_tokyo.pem $*
}

#ssh-add ~/.ec2/ikala_johnlinvc_tokyo.pem 2> /dev/null
#ssh-add ~/.ec2/srmbpr.pem 2> /dev/null
#ssh-add ~/.ec2/john-mbpr-nc.pem 2> /dev/null
#ssh-add ~/.ssh/heroku.johnlinvc 2> /dev/null

export JYTHON_HOME=/usr/local/Cellar/jython/2.5.3/libexec
PATH=$HOME/.cabal/bin:$PATH


#brew install curl-ca-bundle
export SSL_CERT_FILE=/usr/local/opt/curl-ca-bundle/share/ca-bundle.crt

dl () {
        aria2c -s 16 -x 16 -j 16 $*
}

#running manage.py
dj () {
        python manage.py $*
}

#force to use heroku toolbelt
alias heroku=/usr/local/heroku/bin/heroku

# OPAM configuration
. /Users/johnlinvc/.opam/opam-init/init.zsh > /dev/null 2> /dev/null || true

#set $EDITOR
EDITOR=vim

#pylearn2 dataset path
export PYLEARN2_DATA_PATH=/Users/johnlinvc/tmp/pylearn2_dataset

#go paths
export GOPATH=/Users/johnlinvc/.gopath
export PATH=$PATH:/usr/local/opt/go/libexec/bin:$GOPATH/bin

#always put rvm path at the last of the zshrc
PATH=$HOME/.rvm/bin:$PATH # Add RVM to PATH for scripting

#function for showing text in notification
show-notify () {
        CMD="display notification \""$2"\" with title\""$1"\""
        osascript -e "${CMD}"
}

alias xcode-tc="xcrun launch-with-toolchain /Library/Developer/Toolchains/swift-latest.xctoolchain"
alias sb="swift build"
alias sbc="rm -rf .build"

export PATH=/Library/Developer/Toolchains/swift-latest.xctoolchain/usr/bin:$PATH
#export PATH="/Users/johnlinvc/anaconda2/bin:$PATH"

#pyenv
eval "$(pyenv init -)"
#pyenv-virtualenv
eval "$(pyenv virtualenv-init -)"

ocd () {
        DIR=`pwd`
        pushd /tmp > /dev/null
        nohup open -a Terminal $DIR > /dev/null
        popd > /dev/null
}
alias antlr4='java -Xmx500M -cp "/usr/local/Cellar/antlr/4.6/antlr-4.6-complete.jar:$CLASSPATH" org.antlr.v4.Tool'
alias grun='java -Xmx500M -cp "/usr/local/Cellar/antlr/4.6/antlr-4.6-complete.jar:$CLASSPATH" org.antlr.v4.gui.TestRig'

docker-gc () {
        docker run --rm $* -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/.docker-gc:/etc spotify/docker-gc
}

dk-ps () {
        docker run --rm --privileged -v /var/run/docker.sock:/run/docker.sock -ti tomastomecek/sen
}

alias dk=docker
alias dkc=docker-compose

#Swiftenv
export SWIFTENV_ROOT="$HOME/.swiftenv"
export PATH="$SWIFTENV_ROOT/bin:$PATH"
eval "$(swiftenv init -)"

alias tabula-java='docker run -v `pwd`:/app --rm johnlinvc/tabula-java'
